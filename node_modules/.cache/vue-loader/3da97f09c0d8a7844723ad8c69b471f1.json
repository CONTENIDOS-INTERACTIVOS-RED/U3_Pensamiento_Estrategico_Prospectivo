{"remainingRequest":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/pug-plain-loader/index.js!/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/src/views/curso/Tema1.vue?vue&type=template&id=41f8339a&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/src/views/curso/Tema1.vue","mtime":1753208586996},{"path":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Pensamiento_Estrategico_Prospectivo/U3_Pensamiento_Estrategico_Prospectivo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}